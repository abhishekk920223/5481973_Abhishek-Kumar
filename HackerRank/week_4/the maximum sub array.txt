vector<int> maxSubarray(vector<int> arr) {
    int n = arr.size();
    
    // Kadane's Algorithm for max subarray sum
    int current_sum = arr[0];
    int max_subarray_sum = arr[0];
    
    for (int i = 1; i < n; i++) {
        current_sum = max(arr[i], current_sum + arr[i]);
        max_subarray_sum = max(max_subarray_sum, current_sum);
    }
    
    // Max subsequence sum
    int max_element = arr[0];
    int subsequence_sum = 0;
    bool has_positive = false;
    
    for (int i = 0; i < n; i++) {
        if (arr[i] > 0) {
            subsequence_sum += arr[i];
            has_positive = true;
        }
        max_element = max(max_element, arr[i]);
    }
    
    if (!has_positive) {
        subsequence_sum = max_element; // all negative case
    }
    
    return {max_subarray_sum, subsequence_sum};
}
